/**
 * DARA Platform - Deployment Preparation Script
 * 
 * This script prepares the built application for deployment
 * by copying necessary files and setting up the server.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..');

console.log('üì¶ Preparing deployment files...');

// Paths
const distDir = path.join(rootDir, 'dist');
const serverDir = path.join(rootDir, 'server');
const sharedDir = path.join(rootDir, 'shared');

// Make sure dist folder exists
if (!fs.existsSync(distDir)) {
  console.error('‚ùå Dist directory does not exist. Run "npm run build" first.');
  process.exit(1);
}

// Create optimized server file for production
console.log('üìù Creating optimized server file...');

const productionServer = `
// DARA Platform - Production Server Entry
// Generated by prepare-deployment.js

import express from 'express';
import path from 'path';
import { fileURLToPath } from 'url';
import { createServer } from 'http';
import { setupAuth } from './server/auth.js';
import { storage } from './server/storage.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// Create HTTP server
const httpServer = createServer(app);

async function startServer() {
  try {
    // Set up authentication
    setupAuth(app);
    
    // API routes
    app.get('/api/health', (req, res) => {
      res.json({ status: 'ok', environment: 'production' });
    });
    
    // Add your API routes here...
    
    // Serve static files from the current directory (which is the dist folder)
    app.use(express.static(__dirname));
    
    // Always return the main index.html for client-side routing
    app.get('*', (req, res) => {
      if (!req.path.startsWith('/api')) {
        res.sendFile(path.join(__dirname, 'index.html'));
      }
    });
    
    // Start server
    const PORT = process.env.PORT || 5000;
    httpServer.listen(PORT, '0.0.0.0', () => {
      console.log(\`DARA Platform server running on port \${PORT} in production mode\`);
    });
    
    return httpServer;
  } catch (error) {
    console.error("Server startup error:", error);
    process.exit(1);
  }
}

startServer();
`;

fs.writeFileSync(path.join(distDir, 'server.js'), productionServer);

// Create a production package.json
console.log('üìù Creating production package.json...');
const packageJson = JSON.parse(fs.readFileSync(path.join(rootDir, 'package.json'), 'utf8'));

const prodPackageJson = {
  name: packageJson.name,
  version: packageJson.version,
  type: "module",
  main: "server.js",
  scripts: {
    start: "node server.js"
  },
  dependencies: {
    "express": packageJson.dependencies.express,
    "express-session": packageJson.dependencies["express-session"],
    "passport": packageJson.dependencies.passport,
    "passport-local": packageJson.dependencies["passport-local"],
    "connect-pg-simple": packageJson.dependencies["connect-pg-simple"],
    "drizzle-orm": packageJson.dependencies["drizzle-orm"],
    "axios": packageJson.dependencies.axios,
    "ethers": packageJson.dependencies.ethers
  }
};

fs.writeFileSync(path.join(distDir, 'package.json'), JSON.stringify(prodPackageJson, null, 2));

console.log('‚úÖ Deployment preparation complete!');